name: CI/CD Pipeline

on:
  workflow_call:
    inputs:
      image-name:
        description: 'Docker image name'
        required: true
        type: string
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.13'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      EKS_DEV_CLUSTER_NAME:
        required: true

env:
  ecr-registry: 'dkr.ecr.us-east-1.amazonaws.com'
  ecr-region: 'us-east-1'

jobs:
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t ${{ inputs.image-name }}:${{ github.sha }} .

      - name: Save Image
        run: docker save ${{ inputs.image-name }} > ${{ inputs.image-name }}.tar

      - name: Upload Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.image-name }}
          path: ${{ inputs.image-name }}.tar

  tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install --with dev --no-interaction --no-ansi

      - name: Run Tests
        run: |
          pip install pytest pytest-cov junit-xml
          pytest --junitxml=test-results.xml

      - name: Upload Test Artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install --with dev --no-interaction --no-ansi
          pip install coverage

      - name: Run Coverage
        run: |
          coverage run -m pytest
          coverage report
          coverage xml

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi
          pip install flake8

      - name: Run Flake8
        run: flake8 --format=checkstyle --output-file=flake8-report.xml . || true

      - name: Upload Flake8 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8-report.xml

  publish-ecr:
    name: Publish to ECR
    needs: [ docker-build, tests, test-coverage, lint ]
    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Download Docker Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image-name }}
          path: .

      - name: Load Docker Image
        run: docker load < ${{ inputs.image-name }}.tar

      - name: Tag Image
        run: docker tag ${{ inputs.image-name }}:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.${{ env.ecr-registry }}/${{ inputs.image-name }}:${{ github.sha }}

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ecr-region }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.${{ env.ecr-registry }}/${{ inputs.image-name }}:${{ github.sha }}

  deploy-dev:
    name: Deploy to EKS
    needs: publish-ecr
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ecr-region }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.ecr-region }} --name ${{ secrets.EKS_DEV_CLUSTER_NAME }}

      - name: Set Context
        run: |
          kubectl config use-context arn:aws:eks:${{ env.ecr-region }}:${{ secrets.AWS_ACCOUNT_ID }}:cluster/${{ secrets.EKS_DEV_CLUSTER_NAME }}

      - name: Deploy Kubernetes
        run: |
          export IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.${{ env.ecr-registry }}/${{ inputs.image-name }}:${{ github.sha }}
          envsubst < deploy/deployment.yml | kubectl apply -f -
          kubectl apply -f deploy/service.yml